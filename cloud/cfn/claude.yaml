AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Lambda function with S3 trigger and required IAM roles'

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the existing S3 bucket to use
  LambdaFunctionName:
    Type: String
    Default: claude-waste-image-classifier
    Description: Name of the Lambda function
  LambdaCodeBucket:
    Type: String
    Description: Bucket containing Lambda function code
  LambdaCodeKey:
    Type: String
    Description: S3 key (path) to Lambda function code ZIP file
  LambdaCodeVersion:
    Type: String
    Description: Version of Lambda function code in S3
    Default: 'latest'

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:Retrieve
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Describe*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*'
        - PolicyName: IoTPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:Publish
                  - iot:Connect
                Resource:
                  - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*'
                  - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*'

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: claude_image_classification.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
        S3ObjectVersion: !Ref LambdaCodeVersion
      Runtime: python3.9
      Timeout: 300
      MemorySize: 128

  # S3 Bucket Notification Configuration
  S3BucketNotification:
    Type: AWS::S3::BucketNotification
    Properties:
      Bucket: !Ref S3BucketName
      LambdaFunctionConfigurations:
        - Event: 's3:ObjectCreated:Put'
          Function: !GetAtt LambdaFunction.Arn

  # Lambda Permission for S3
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${S3BucketName}'

Outputs:
  LambdaArn:
    Description: ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3BucketName
  LambdaRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn